/* Generated By:JavaCC: Do not edit this line. RamParser.java */
  package frontend.generated;
  public class RamParser implements RamParserConstants {

  static final public void Goal() throws ParseException {
    trace_call("Goal");
    try {
      Program();
      jj_consume_token(0);
    } finally {
      trace_return("Goal");
    }
  }

  static final public void RamToken() throws ParseException {
    trace_call("RamToken");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      case MAIN:
        jj_consume_token(MAIN);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case LBRAC:
        jj_consume_token(LBRAC);
        break;
      case RBRAC:
        jj_consume_token(RBRAC);
        break;
      case RPAREN:
        jj_consume_token(RPAREN);
        break;
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      case PLUSEQ:
        jj_consume_token(PLUSEQ);
        break;
      case SEMICOL:
        jj_consume_token(SEMICOL);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case FOREACH:
        jj_consume_token(FOREACH);
        break;
      case COLLON:
        jj_consume_token(COLLON);
        break;
      case PRINT:
        jj_consume_token(PRINT);
        break;
      case PRINTLN:
        jj_consume_token(PRINTLN);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case LESSTHANEQ:
        jj_consume_token(LESSTHANEQ);
        break;
      case EQUALITY:
        jj_consume_token(EQUALITY);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TIMES:
        jj_consume_token(TIMES);
        break;
      case DOT:
        jj_consume_token(DOT);
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
        break;
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case NEW:
        jj_consume_token(NEW);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("RamToken");
    }
  }

  static final public void Program() throws ParseException {
    trace_call("Program");
    try {
      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        ClassDecl();
      }
    } finally {
      trace_return("Program");
    }
  }

/* MainClass() 	->  class id { public static void main ( String [ ] id ) { Statement } } */
  static final public void MainClass() throws ParseException {
    trace_call("MainClass");
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LBRAC);
      jj_consume_token(RBRAC);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      Statement();
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MainClass");
    }
  }

/* ClassDecl 	-> 	class id { VarDecl* MethodDecl* } */
  static final public void ClassDecl() throws ParseException {
    trace_call("ClassDecl");
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        VarDecl();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        MethodDecl();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("ClassDecl");
    }
  }

/* VarDecl 	-> 	Type id ! */
  static final public void VarDecl() throws ParseException {
    trace_call("VarDecl");
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(END);
    } finally {
      trace_return("VarDecl");
    }
  }

/* MethodDecl 	-> 	public Type id ( FormalList ) { VarDecl* Statement* return Exp ! } */
  static final public void MethodDecl() throws ParseException {
    trace_call("MethodDecl");
    try {
      jj_consume_token(PUBLIC);
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      FormalList();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        VarDecl();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case FOREACH:
        case IF:
        case WHILE:
        case PRINT:
        case PRINTLN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(END);
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MethodDecl");
    }
  }

/* FormalList 	-> 	Type id FormalRest* */
  static final public void FormalList() throws ParseException {
    trace_call("FormalList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case IDENTIFIER:
        Type();
        jj_consume_token(IDENTIFIER);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_6;
          }
          FormalRest();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } finally {
      trace_return("FormalList");
    }
  }

/* FormalRest 	-> 	, Type id */
  static final public void FormalRest() throws ParseException {
    trace_call("FormalRest");
    try {
      jj_consume_token(COMMA);
      Type();
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("FormalRest");
    }
  }

/* Type 	-> 	int []	| bool	| int |	id */
  static final public void Type() throws ParseException {
    trace_call("Type");
    try {
      if (jj_2_2(2)) {
        jj_consume_token(INT);
        jj_consume_token(LBRAC);
        jj_consume_token(RBRAC);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
          jj_consume_token(BOOL);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Type");
    }
  }

/* Statement 	-> 	{ Statement* }
	| 	if ( Exp ) Statement else Statement
	| 	while ( Exp ) Statement
	| 	foreach ( Type id : id ) Statement
	| 	print ( ExpList ) !
	| 	println ( ExpList ) !
	| 	id = Exp !
	| 	id += Exp !
	| 	id [ Exp ] = Exp ! */
  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case FOREACH:
          case IF:
          case WHILE:
          case PRINT:
          case PRINTLN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Exp();
        jj_consume_token(RPAREN);
        Statement();
        jj_consume_token(ELSE);
        Statement();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Exp();
        jj_consume_token(RPAREN);
        Statement();
        break;
      case FOREACH:
        jj_consume_token(FOREACH);
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLLON);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(RPAREN);
        Statement();
        break;
      case PRINT:
        jj_consume_token(PRINT);
        jj_consume_token(LPAREN);
        ExpList();
        jj_consume_token(RPAREN);
        jj_consume_token(END);
        break;
      case PRINTLN:
        jj_consume_token(PRINTLN);
        jj_consume_token(LPAREN);
        ExpList();
        jj_consume_token(RPAREN);
        jj_consume_token(END);
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(ASSIGN);
          Exp();
          jj_consume_token(END);
        } else if (jj_2_4(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(PLUSEQ);
          Exp();
          jj_consume_token(END);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LBRAC);
            Exp();
            jj_consume_token(RBRAC);
            jj_consume_token(ASSIGN);
            Exp();
            jj_consume_token(END);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("Statement");
    }
  }

/*
Exp 	-> 	
		<INTEGER_LITERAL> Exp'
	| 	true Exp'
	| 	false Exp'
	| 	id Exp'
	| 	this Exp'
	| 	; Exp
	| 	( Exp )
	 	Lookahead(2)
	|	new int [ Exp ]
	| 	new id ( ) */
  static final public void Exp() throws ParseException {
    trace_call("Exp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        ExpPrime();
        break;
      case TRUE:
        jj_consume_token(TRUE);
        ExpPrime();
        break;
      case FALSE:
        jj_consume_token(FALSE);
        ExpPrime();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        ExpPrime();
        break;
      case THIS:
        jj_consume_token(THIS);
        ExpPrime();
        break;
      case SEMICOL:
        jj_consume_token(SEMICOL);
        Exp();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        Exp();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_5(2)) {
          jj_consume_token(NEW);
          jj_consume_token(INT);
          jj_consume_token(LBRAC);
          Exp();
          jj_consume_token(RBRAC);
          ExpPrime();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            jj_consume_token(NEW);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            jj_consume_token(RPAREN);
            ExpPrime();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("Exp");
    }
  }

/*
Exp' -> [lookahead(2) //optional since 'AND' 'AND' not part of lang
			op Exp
		| [Exp] Exp'
		| . length Exp'
		| . id (ExpList)
			]
			 */
  static final public void ExpPrime() throws ParseException {
    trace_call("ExpPrime");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRAC:
      case AND:
      case OR:
      case LESSTHAN:
      case LESSTHANEQ:
      case PLUS:
      case MINUS:
      case TIMES:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case LESSTHAN:
        case LESSTHANEQ:
        case PLUS:
        case MINUS:
        case TIMES:
          op();
          Exp();
          ExpPrime();
          break;
        case LBRAC:
          jj_consume_token(LBRAC);
          Exp();
          jj_consume_token(RBRAC);
          ExpPrime();
          break;
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_6(2)) {
            jj_consume_token(DOT);
            jj_consume_token(LENGTH);
            ExpPrime();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              jj_consume_token(DOT);
              jj_consume_token(IDENTIFIER);
              jj_consume_token(LPAREN);
              ExpList();
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } finally {
      trace_return("ExpPrime");
    }
  }

/* ExpList 	-> 	Exp ExpRest* */
  static final public void ExpList() throws ParseException {
    trace_call("ExpList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case SEMICOL:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        Exp();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_8;
          }
          ExpRest();
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRAC:
          jj_consume_token(LBRAC);
          jj_consume_token(RBRAC);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      }
    } finally {
      trace_return("ExpList");
    }
  }

/* ExpRest 	-> 	, Exp */
  static final public void ExpRest() throws ParseException {
    trace_call("ExpRest");
    try {
      jj_consume_token(COMMA);
      Exp();
    } finally {
      trace_return("ExpRest");
    }
  }

/* id 	-> 	<IDENTIFIER> */
  static final public void id() throws ParseException {
    trace_call("id");
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("id");
    }
  }

/* op 	-> 	and | or | lt | lte | + | - | * */
  static final public void op() throws ParseException {
    trace_call("op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case LESSTHANEQ:
        jj_consume_token(LESSTHANEQ);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TIMES:
        jj_consume_token(TIMES);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(PLUSEQ)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRAC)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RamParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0x100,0xc000000,0x800,0x40800200,0x2000000,0xc000000,0xc000000,0x40800200,0x40800200,0x0,0x408000,0x0,0x40000,0x0,0x40000,0x2000000,0x40000,0x408000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xdffff,0x0,0x80000,0x0,0x80007,0x0,0x80000,0x80000,0x80007,0x7,0x80000,0xc7000,0x8000,0x3f8,0x400,0x7f8,0x0,0x0,0xcf000,0x3f8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RamParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RamParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RamParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RamParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RamParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RamParser(RamParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RamParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                          }
